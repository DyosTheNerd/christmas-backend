package jp.co.axa.apidemo.unit.services;


import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import jp.co.axa.apidemo.dto.ElvenTaskDTO;
import jp.co.axa.apidemo.entities.ElvenTask;
import jp.co.axa.apidemo.enums.TaskStatus;
import jp.co.axa.apidemo.enums.TaskType;

import jp.co.axa.apidemo.events.ElvenTaskCreatedEvent;
import jp.co.axa.apidemo.repositories.ElvenTaskRepository;

import jp.co.axa.apidemo.services.ElvenTaskServiceImpl;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;


import org.mockito.junit.MockitoJUnitRunner;
import org.modelmapper.ModelMapper;

import org.springframework.context.ApplicationEventPublisher;

@RunWith(MockitoJUnitRunner.class)
public class ElvenTaskServiceTest {


    @InjectMocks
    ElvenTaskServiceImpl testObject;


    @Mock
    private ElvenTaskRepository elvenTaskRepository;

    @Mock
    private ModelMapper modelMapper;

    @Mock
    private ApplicationEventPublisher applicationEventPublisher;

    /**
     * Test whether the task is set up correctly and forwarded to JPA
     */
    @Test
    public void testTaskCreatedPersistsTaskToJPA(){
        testObject.createElvenTask(TaskType.READING,1000l);

        ArgumentCaptor<ElvenTask> captor = ArgumentCaptor.forClass(ElvenTask.class);
        verify(elvenTaskRepository).save(captor.capture());
        ElvenTask capturedTask = captor.getValue();

        assertEquals("Linked object ID is used", new Long(1000l),capturedTask.getLinkedObjectID());
        assertEquals("Selected TaskType is used",TaskType.READING,capturedTask.getTaskType());
        assertEquals("Task initialized with Open Status",TaskStatus.OPEN,capturedTask.getTaskStatus());
        assertEquals("ID left blank for database",null, capturedTask.getId());

    }


    /**
     * Test that an event is thrown and the DTO is taken as generated by the mapper class and not tampered with.
     */
    @Test
    public void testEventNotificationDone(){

        //setup a mock for the event detail object
        ElvenTaskDTO expectedDTO = mock(ElvenTaskDTO.class);
        when(modelMapper.map(any(),any())).thenReturn(expectedDTO);

        //execute test
        testObject.createElvenTask(TaskType.READING,1000l);


        ArgumentCaptor<ElvenTaskCreatedEvent> captor = ArgumentCaptor.forClass(ElvenTaskCreatedEvent.class);
        // verification that the event was actually triggered
        verify(applicationEventPublisher).publishEvent(captor.capture());
        // verification that the data in the object returned by the mapper is not changed by the service
        verifyZeroInteractions(expectedDTO);
        ElvenTaskDTO actualDTO = captor.getValue().getDetails();

        // verification that the mapper object is actually used
        assertEquals(expectedDTO,actualDTO);



    }


}
